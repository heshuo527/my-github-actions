# Workflow 名称，显示在 GitHub Actions 界面
name: Build and Push Docker Image

# 定义权限，确保 Actions 有权操作仓库和推送镜像
permissions:
  contents: read        # 读取代码权限
  packages: write       # 允许推送镜像到 GitHub Container Registry

# 定义触发事件
on:
  push:
    branches:
      - main            # 推送到 main 分支触发
  workflow_dispatch:    # 支持手动触发，类似 Jenkins 的“Build Now”

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # 在最新的 Ubuntu 虚拟机上运行
    steps:
      # 步骤 1：检出代码
      - name: Checkout Code
        uses: actions/checkout@v4  # 拉取仓库代码

      # 步骤 2：设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4  # 安装 Node.js
        with:
          node-version: '18'      # 使用 Node.js 18.x

      # 步骤 3：安装项目依赖
      - name: Install Dependencies
        run: npm install        # 运行 npm install 安装依赖

      # 步骤 4：构建 React 项目
      - name: Build Project
        run: npm run build      # 运行 npm run build 生成 dist 目录

      # 步骤 5：调试构建产物（可选，确认文件存在）
      - name: Debug Build Files
        run: ls -la ./dist     # 列出 dist 目录内容，确保有 index.html 等

      # 步骤 6：登录 GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3  # 使用 Docker 登录 Action
        with:
          registry: ghcr.io         # 指定 GitHub Container Registry
          username: ${{ github.actor }}  # GitHub 用户名（自动获取）
          password: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token 认证

      # 步骤 7：构建并推送 Docker 镜像
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6  # 构建和推送镜像
        with:
          context: .              # 使用当前目录（包含 Dockerfile）
          push: true              # 推送镜像到 ghcr.io
          tags: ghcr.io/heshuo527/my-project:latest  # 镜像名称，替换 heshuo527 为你的 GitHub 用户名